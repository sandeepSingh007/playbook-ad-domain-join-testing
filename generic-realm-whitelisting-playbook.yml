---
- name: Manage User and Group Access with realm permit/deny (Generic)
  hosts: all
  become: true
  vars:
    # Example: Configure the following variables during runtime
    # add_users: ["newuser1", "newuser2"]    # List of members to add (format: username)
    # remove_users: ["tdsaiful"]             # List of members to be removed (format: username)
    # add_groups: ["newgroup1"]              # List of groups to be added (format: groupname)
    # remove_groups: ["oldgroup"]            # List of groups to be removed (format: groupname)
  
  tasks:
    - name: Check if realm command is available
      command: which realm
      register: realm_check
      failed_when: false
      changed_when: false
      
    - name: Fail if realm is not installed
      fail:
        msg: "The realm command is not available. Please install realmd package first."
      when: realm_check.rc != 0
      
    - name: Create backup of current realm permit configuration
      shell: realm list --name-only | xargs -I{} realm list {} | grep "permitted" > /tmp/realm_permit_backup_$(date +%Y%m%d_%H%M%S).txt
      changed_when: false
      ignore_errors: true
    
    # Filter out empty or undefined values
    - name: Set filtered user and group lists
      set_fact:
        filtered_add_users: "{{ add_users | default([]) | select('string') | select('regex', '.+') | list }}"
        filtered_remove_users: "{{ remove_users | default([]) | select('string') | select('regex', '.+') | list }}"
        filtered_add_groups: "{{ add_groups | default([]) | select('string') | select('regex', '.+') | list }}"
        filtered_remove_groups: "{{ remove_groups | default([]) | select('string') | select('regex', '.+') | list }}"
      
    - name: Add users to whitelist
      command: "realm permit {{ item }}"
      loop: "{{ filtered_add_users }}"
      when: filtered_add_users | length > 0
      register: add_users_result
      failed_when: 
        - add_users_result.rc != 0
        - "'already permitted' not in add_users_result.stderr"
      changed_when: add_users_result.rc == 0
      
    - name: Remove users from whitelist (using deny)
      command: "realm deny {{ item }}"
      loop: "{{ filtered_remove_users }}"
      when: filtered_remove_users | length > 0
      register: deny_users_result
      failed_when: 
        - deny_users_result.rc != 0
        - "'not permitted' not in deny_users_result.stderr"
      changed_when: deny_users_result.rc == 0
      
    - name: Add groups to whitelist
      command: "realm permit -g {{ item }}"
      loop: "{{ filtered_add_groups }}"
      when: filtered_add_groups | length > 0
      register: add_groups_result
      failed_when: 
        - add_groups_result.rc != 0
        - "'already permitted' not in add_groups_result.stderr"
      changed_when: add_groups_result.rc == 0
      
    - name: Remove groups from whitelist (using deny)
      command: "realm deny -g {{ item }}"
      loop: "{{ filtered_remove_groups }}"
      when: filtered_remove_groups | length > 0
      register: deny_groups_result
      failed_when: 
        - deny_groups_result.rc != 0
        - "'not permitted' not in deny_groups_result.stderr"
      changed_when: deny_groups_result.rc == 0
      
    - name: Get current permission status
      shell: "realm list --name-only | xargs -I{} realm list {} | grep permitted || echo 'No explicit permissions set.'"
      register: current_permissions
      changed_when: false
      
    - name: Display user and group permission changes
      debug:
        msg: |
          === Permission Management Summary ===
          
          Users added: {{ filtered_add_users | join(', ') if filtered_add_users | length > 0 else 'None' }}
          Users removed: {{ filtered_remove_users | join(', ') if filtered_remove_users | length > 0 else 'None' }}
          Groups added: {{ filtered_add_groups | join(', ') if filtered_add_groups | length > 0 else 'None' }}
          Groups removed: {{ filtered_remove_groups | join(', ') if filtered_remove_groups | length > 0 else 'None' }}
          
          Current permission status:
          {{ current_permissions.stdout }}
