---
- name: Detect and Execute RHEL 789 OS-specific tasks
  hosts: all
  gather_facts: yes
  vars:
    domain_name: wikilab.asia
    username: "{{ username }}"
    password: "{{ pass }}"
    domain_check_results: []

  pre_tasks:
    # Check if any hosts need domain joining - runs before main tasks
    - name: Check if user {{ username }} exists
      shell: getent passwd "{{ username }}"
      register: check_user
      changed_when: False
      ignore_errors: True
      
    - name: Check if LDAP port is in use
      shell: lsof -i:636
      register: check_ldap
      changed_when: False
      ignore_errors: True
      
    - name: Check realm package installation
      shell: rpm -q realmd
      register: realmd_installed
      changed_when: False
      ignore_errors: True
      
    - name: Check realm list if realm is installed
      shell: realm list | grep -E "realm-name|domain-name"
      register: check_realm
      changed_when: False
      ignore_errors: True
      when: realmd_installed.rc == 0
      
    - name: Determine if server is already properly joined to domain
      set_fact:
        already_joined: "{{ check_user.rc == 0 and check_ldap.rc == 0 and (check_realm.rc == 0 if realmd_installed.rc == 0 else false) }}"
        
    - name: Display domain join status
      debug:
        msg: "{{ 'Server is already properly joined to the domain.' if already_joined else 'Server needs to be joined to the domain.' }}"
      
    # Create a group for hosts that need domain joining
    - name: Add host to domain_join group if needed
      group_by:
        key: "domain_join_{{ not already_joined }}"
    
    # Check if any hosts need domain joining - runs on controller only once  
    - name: Collect info about hosts needing domain join
      set_fact:
        host_needs_joining: "{{ not already_joined }}"
      
    - name: Aggregate domain join status across all hosts
      set_fact:
        all_hosts_joined: "{{ (all_hosts_joined | default(true)) and (hostvars[item].host_needs_joining | default(false) == false) }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost

    # Create a summary list of all hosts and their status
    - name: Create host status summary
      set_fact:
        host_status_summary: "{{ host_status_summary | default([]) + [{'host': item, 'already_joined': hostvars[item].already_joined | default(false)}] }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost
    
    - name: Display domain join status summary for all hosts
      debug:
        msg:
          - "Domain Join Status Summary:"
          - "{% for host_info in host_status_summary %} - {{ host_info.host }}: {{ 'Already joined to domain' if host_info.already_joined else 'Needs to be joined to domain' }}{% endfor %}"
          - ""
          - "{% if all_hosts_joined | default(false) %}All hosts are already joined to domain. Remaining tasks will be skipped.{% else %}Some hosts need to be joined to domain. Proceeding with domain join for those hosts.{% endif %}"
      run_once: true
      delegate_to: localhost 
      
    - name: Set skip_remaining_tasks flag
      set_fact:
        skip_remaining_tasks: "{{ all_hosts_joined | default(false) }}"
      delegate_to: localhost
      run_once: true

  tasks:
    # Skip all tasks if all hosts are already joined
    - name: Skip all tasks if all hosts are joined
      meta: end_play
      when: skip_remaining_tasks | default(false)
      
    - name: Check if running on RHEL 789
      fail:
        msg: "This playbook only runs on RHEL 789 servers."
      when: ansible_distribution_major_version | int == 6
      tags: always
      
    - name: Gather OS version and distribution facts
      debug:
        var: ansible_distribution_version
      register: os_version
      when: not already_joined

    - name: Extract OS major version from facts
      set_fact:
        ansible_distribution_major_version: "{{ ansible_distribution_version.split('.')[0] }}"
      when: not already_joined

    - name: Print the OS major version
      debug:
        var: ansible_distribution_major_version
      when: not already_joined
    
    # Join domain section - only runs if server is not already joined
    - name: Install realm package
      shell: |
            if ! rpm -q realmd; then
            yum install -y realmd || echo "Error: No package realmd available"
            fi
      register: check_realmpkg
      failed_when: "'Error: No package realmd available' in check_realmpkg.stdout"
      when: not already_joined

    - name: Install realm package along with sssd
      package:
        name: "{{ item }}"
        state: latest
      with_items:
        - realmd
        - adcli
        - sssd
        - krb5-workstation
        - authconfig
        - oddjob
        - oddjob-mkhomedir
        - samba-common-tools
        - lsof
      when: not already_joined

    - name: Join domain (RHEL 7, 8, 9)
      shell: echo "{{password}}" | realm join {{domain_name}} -U {{username}} --verbose
      register: join_domain
      ignore_errors: yes
      no_log: true
      when: not already_joined
      
    - name: Wait for 10 seconds after domain join
      pause:
        seconds: 10 
      when: not already_joined and join_domain is defined
          
    - name: Print server join domain error message if any
      debug:
        var: join_domain.stderr_lines
      when: not already_joined and join_domain is defined and join_domain.rc != 0
          
    - name: Modify SSSD Configuration in RHEL7, 8 and 9
      copy:
        src: sssd.conf
        dest: /etc/sssd/sssd.conf
        mode: "0600"
      when: not already_joined

    - name: Add cert path to the ldap.conf in RHEL7, 8 and 9
      lineinfile:
        path: /etc/openldap/ldap.conf
        insertafter: BOF
        line: 'TLS_CACERT      /etc/openldap/certs/wikilab-ca.cer'
        state: present
      when: not already_joined

    - name: Start and enable oddjobd service
      service:
        name: oddjobd.service
        state: started
        enabled: yes
      when: not already_joined
        
    - name: Copy LDAP CERT
      copy:
        src: Wikilab-ca.cer
        dest: /etc/openldap/certs
        mode: "0655"
      when: not already_joined

    - name: Restart sssd
      service:
        name: sssd
        state: restarted
      vars:
        ansible_command_timeout: 20  # 20 seconds timeout for this service restart
        ansible_timeout: 20          # General timeout
      when: not already_joined
    
    - name: Wait for 10 seconds after restarting sssd
      pause:
        seconds: 10
      when: not already_joined

    # Verification section - only for hosts that needed domain joining
    - name: Verify domain join configuration
      block:
        - name: Verify AD user exists after domain join
          shell: getent passwd "{{ username }}"
          register: check_user_after
          changed_when: False
          ignore_errors: True
          
        - name: Print result ID for AD user
          debug:
            msg: "{% if check_user_after.rc != 0 %}Check failed: AD user {{ username }} does not exist on {{ ansible_facts['fqdn'] }}{% else %}Check Pass: AD user {{ username }} exists on {{ ansible_facts['fqdn'] }}{% endif %}"
              
        - name: Verify LDAP port is in use
          shell: lsof -i:636
          register: check_ldap_after
          changed_when: False
          ignore_errors: True           

        - name: Print result LDAP port is in use
          debug:
            msg: "{% if check_ldap_after.rc != 0 %}Check failed: LDAP port 636 is not listening on {{ ansible_facts['fqdn'] }}{% else %}Check Pass: LDAP port 636 is listening on {{ ansible_facts['fqdn'] }}{% endif %}"
      when: not already_joined

    # SSH testing - only for hosts that needed domain joining
    - name: Test SSH login before blacklisting (using execution nodes)
      delegate_to: "{{ hostvars['localhost']['ansible_controller_host'] | default('localhost') }}"
      shell: sshpass -p "{{ password }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 {{ username }}@{{ ansible_host }} echo "SSH login successful"
      register: ssh_test_before
      ignore_errors: yes
      no_log: true
      when: not already_joined

    - name: Print full SSH test output
      debug:
        var: ssh_test_before
        verbosity: 0
      no_log: true
      when: not already_joined 
      
    - name: Print detailed SSH test results
      debug:
        msg: |
          SSH Test Results for {{ username }}@{{ ansible_facts['fqdn'] }}:
          Return Code: {{ ssh_test_before.rc }}
          Stdout: {{ ssh_test_before.stdout }}
          Stderr: {{ ssh_test_before.stderr }}
          Command: {{ ssh_test_before.cmd }}
      when: not already_joined
          
    - name: Print SSH test result before blacklisting
      debug:
        msg: "{% if ssh_test_before.rc != 0 %}Check failed: Unable to login as AD user '{{ username }}' on {{ ansible_facts['fqdn'] }}{% else %}Check Pass: Login as AD user '{{ username }}' on {{ ansible_facts['fqdn'] }} was successful{% endif %}"
      when: not already_joined

    # Blacklisting section - only for hosts that needed domain joining
    - name: Blacklisting all Users
      shell: realm permit -x "{{ username }}"
      when: not already_joined

    - name: Wait for 10 seconds after blacklisting users
      pause:
        seconds: 10
      when: not already_joined

    - name: Blacklisting all Groups
      shell: realm permit -xg "{{ username }}"
      when: not already_joined

    - name: Wait for 10 seconds after blacklisting groups
      pause:
        seconds: 10
      when: not already_joined

    # Test blacklisting with SSH test
    - name: Test SSH login after blacklisting (using execution nodes)
      delegate_to: "{{ hostvars['localhost']['ansible_controller_host'] | default('localhost') }}"
      shell: sshpass -p "{{ password }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 {{ username }}@{{ ansible_host }} echo "SSH login successful"
      register: ssh_test_after
      ignore_errors: yes
      no_log: true
      when: not already_joined

    - name: Print full SSH test output
      debug:
        var: ssh_test_after
        verbosity: 0
      when: not already_joined
      no_log: true
        
    - name: Print detailed SSH test results
      debug:
        msg: |
          SSH Test Results for {{ username }}@{{ ansible_facts['fqdn'] }}:
          Return Code: {{ ssh_test_after.rc }}
          Stdout: {{ ssh_test_after.stdout }}
          Stderr: {{ ssh_test_after.stderr }}
          Command: {{ ssh_test_after.cmd }}
      when: not already_joined
      #no_log: true

    - name: Print result of SSH login test after blacklisting
      debug:
        msg: "{{ 'All Users are blacklisted successfully - SSH access denied as expected' if ssh_test_after.rc != 0 else 'WARNING: User still has SSH access after blacklisting' }}"
      when: not already_joined

    # Final status report - only for hosts that needed domain joining
    - name: Print final result of all checks
      debug:
        msg: "{% if check_user_after.rc == 0 and check_ldap_after.rc == 0 %}Successfully joined server {{ ansible_facts['fqdn'] }} to the domain{% else %}Failed to join server {{ ansible_facts['fqdn'] }} to the domain. Check manually or rerun playbook.{% endif %}"
      when: not already_joined
