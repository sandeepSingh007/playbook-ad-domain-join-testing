---
- name: SUSE 11 Ad-Domain-join Playbook (Pre-Validation & Post-Validation)
  #hosts: "{{ host_list }}"
  hosts:  all
  gather_facts: true
  vars:
    domain_name: wikilab.asia
    username: "{{ user }}"
    password: "{{ pass }}"
    ansible_python_interpreter: /usr/bin/env python
    domain_check_results: []

  pre_tasks:
    # Initial OS version checks
    - name: Check if running on SUSE 11
      fail:
        msg: "This playbook only runs on SUSE 11 servers."
      when: ansible_distribution != "SLES" or ansible_distribution_major_version | int != 11
      tags: always
      
    - name: Gather OS version and distribution facts
      debug:
        var: ansible_distribution_version
      register: os_version

    - name: Extract OS major version from facts
      set_fact:
        ansible_distribution_major_version: "{{ ansible_distribution_version.split('.')[0] }}"

    - name: Print the OS major version
      debug:
        var: ansible_distribution_major_version

    # Pre-checks to determine if domain join is needed
    - name: Check if user {{ username }} exists
      shell: getent passwd "{{ username }}"
      register: check_user
      changed_when: False
      ignore_errors: True
      
    - name: Check if LDAP port is in use
      shell: lsof -i:636
      register: check_ldap
      changed_when: False
      ignore_errors: True
      
    - name: Collect domain check results for this host
      set_fact:
        host_domain_check: {
          "host": "{{ ansible_facts['fqdn'] }}", 
          "os_type": "SUSE {{ ansible_distribution_major_version }}", 
          "user_check": "{{ check_user.rc }}", 
          "ldap_check": "{{ check_ldap.rc }}"
        }

    - name: Add already_joined flag
      set_fact:
        already_joined: "{{ check_user.rc == 0 and check_ldap.rc == 0 }}"

    - name: Update host_domain_check with already_joined flag
      set_fact:
        host_domain_check: "{{ host_domain_check | combine({'already_joined': already_joined}) }}"

    - name: Add host domain check to domain_check_results
      set_fact:
        domain_check_results: "{{ domain_check_results + [host_domain_check] }}"
      delegate_to: localhost
      run_once: false

    - name: Display domain join status for this server
      debug:
        msg: "{{ 'Server ' + ansible_facts['fqdn'] + ' is already properly joined to the domain.' if already_joined else 'Server ' + ansible_facts['fqdn'] + ' needs to be joined to the domain.' }}"
      
    # Create a group for hosts that need domain joining
    - name: Add host to domain_join group if needed
      group_by:
        key: "domain_join_{{ not already_joined }}"
    
    # Check if any hosts need domain joining - runs on controller only once  
    - name: Collect info about hosts needing domain join
      set_fact:
        host_needs_joining: "{{ not already_joined }}"
      
    - name: Aggregate domain join status across all hosts
      set_fact:
        all_hosts_joined: "{{ (all_hosts_joined | default(true)) and (hostvars[item].host_needs_joining | default(false) == false) }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost

    # Process domain check results to get a comprehensive view
    - name: Consolidate domain check results
      set_fact:
        consolidated_domain_checks: "{{ consolidated_domain_checks | default([]) + hostvars[item].domain_check_results | default([]) }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost

    - name: Display comprehensive domain join status for all hosts
      debug:
        msg: |
          Domain Join Status Summary:
          {% for check in consolidated_domain_checks %}
          - Host: {{ check.host }} ({{ check.os_type }})
            User Check: {{ 'PASS' if check.user_check == '0' else 'FAIL' }}
            LDAP Check: {{ 'PASS' if check.ldap_check == '0' else 'FAIL' }}
            Status: {{ 'Already joined to domain' if check.already_joined else 'Needs to be joined to domain' }}
          {% endfor %}
          
          {% if all_hosts_joined | default(false) %}
          All hosts are already joined to domain. Remaining tasks will be skipped.
          {% else %}
          Some hosts need to be joined to domain. Proceeding with domain join for those hosts.
          {% endif %}
      run_once: true
      delegate_to: localhost

    - name: Set skip_remaining_tasks flag
      set_fact:
        skip_remaining_tasks: "{{ all_hosts_joined | default(false) }}"
      delegate_to: localhost
      run_once: true

  tasks:
    # Skip all tasks if all hosts are already joined
    - name: Skip all tasks if all hosts are already joined
      meta: end_play
      when: skip_remaining_tasks | default(false)
      
    # Common setup for SUSE 11 - only for hosts that need joining
    - name: Modify ldap Configuration
      copy:
        src: suse11_ldap.conf
        dest: /etc/openldap/ldap.conf
        mode: "0644"
      when: not already_joined

    - name: Modify Samba Configuration
      copy:
        src: suse11_smb.conf
        dest: /etc/samba/smb.conf
        mode: "0644"
      when: not already_joined
        
    - name: Create the openldap certs directory if it doesn't exist
      file:
        path: /etc/openldap/certs
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: not already_joined
          
    - name: Copy LDAP CERT
      copy:
        src: WIKILAB.ASIA-ROOT-CA.cer
        dest: /etc/openldap/certs/WIKILAB.ASIA-ROOT-CA.cer
        mode: '0644'
      when: not already_joined

    - name: Ensure temporary directory exists
      file:
        path: /tmp/suse11_adpackages
        state: directory
        mode: '0755'
      when: not already_joined

    # Install packages on SLES 11
    - name: Transfer suse11_adpackages.tar.gz from local /files directory
      copy:
        src: suse11_adpackages.tar.gz
        dest: /tmp/suse11_adpackages.tar.gz
        mode: '0644'
      when: not already_joined

    - name: Extract suse11_adpackages.tar.gz
      unarchive:
        src: /tmp/suse11_adpackages.tar.gz
        dest: /tmp/suse11_adpackages
        remote_src: true
      when: not already_joined

    - name: Install RPM packages using zypper
      command: zypper --non-interactive install {{ item }}
      with_items:
        - /tmp/suse11_adpackages/sssd-tools-1.9.4-0.16.1.x86_64.rpm
        - /tmp/suse11_adpackages/sssd-32bit-1.9.4-0.16.1.x86_64.rpm
        - /tmp/suse11_adpackages/sssd-1.9.4-0.16.1.x86_64.rpm
        - /tmp/suse11_adpackages/samba-winbind-32bit-3.6.3-0.58.1.x86_64.rpm
        - /tmp/suse11_adpackages/samba-winbind-3.6.3-0.58.1.x86_64.rpm
        - /tmp/suse11_adpackages/pam-modules-11-1.25.26.x86_64.rpm
        - /tmp/suse11_adpackages/openldap2-client-2.4.26-0.30.1.x86_64.rpm
        - /tmp/suse11_adpackages/libiniparser0-32bit-2.17-87.17.x86_64.rpm
        - /tmp/suse11_adpackages/libiniparser0-2.17-87.17.x86_64.rpm
        - /tmp/suse11_adpackages/krb5-client-1.6.3-133.49.66.1.x86_64.rpm
      ignore_errors: true
      when: not already_joined

    - name: Clean up temporary files
      file:
        path: "/tmp/suse11_adpackages.tar.gz"
        state: absent
      when: not already_joined

    - name: Clean up temporary directory
      file:
        path: /tmp/suse11_adpackages
        state: absent
      when: not already_joined

    - name: Join domain using net ads
      #shell: echo -n "{{ password }}" | net ads join -U {{ username }}@{{ domain_name }} --verbose
      shell: net ads join -U {{ username }}@{{ domain_name }}%{{ password }} --verbose
      register: join_domain
      changed_when: False
      ignore_errors: yes
      no_log: true
      when: not already_joined
  
    - name: Print server join domain error message if any
      debug:
        var: join_domain.stderr_lines
      when: not already_joined and join_domain.rc != 0
      
    - name: Modify SSSD Configuration
      copy:
        src: suse11_sssd.conf
        dest: /etc/sssd/sssd.conf
        mode: "0600"
      when: not already_joined

    - name: Update nsswitch.conf configuration file
      replace:
        path: /etc/nsswitch.conf
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
        backup: true
      with_items:
        - { regexp: '^passwd:.*', replace: 'passwd: compat sss' }
        - { regexp: '^group:.*', replace: 'group: compat sss' }
      when: not already_joined

    - name: Enable SSSD Authentication in PAM
      command: pam-config -a --sss
      ignore_errors: true
      when: not already_joined

    - name: Enable SSSD Home Directory Management in PAM
      command: pam-config -a --mkhomedir
      ignore_errors: true
      when: not already_joined

    - name: Restart Samba, Winbind, and SSSD services
      service:
        name: "{{ item }}"
        state: restarted
        enabled: true
      with_items:
        - smb
        - winbind
        - sssd
      ignore_errors: true
      when: not already_joined

    - name: Stop nscd service
      service:
        name: nscd
        state: stopped
        enabled: false
      ignore_errors: true
      when: not already_joined
      
    # Wait after restarting sssd
    - name: Wait for 10 seconds before post-validation
      pause:
        seconds: 10
      when: not already_joined

    # Post-validation checks
    - name: Check ID for AD user
      shell: getent passwd "{{ username }}"
      register: check_user_after
      changed_when: False
      ignore_errors: True
      when: not already_joined

    - name: Print result ID for AD user
      debug:
        msg: >-
          {% if check_user_after.rc != 0 %}
          Check failed: AD user '{{ username }}' does not exist on {{ ansible_facts['fqdn'] }}
          {% else %}
          Check Pass: AD user '{{ username }}' exist on {{ ansible_facts['fqdn'] }}
          {% endif %}
      when: not already_joined and check_user_after is defined

    - name: Check if LDAP port is in use
      shell: lsof -i:636
      register: check_ldap_after
      changed_when: False
      ignore_errors: True           
      when: not already_joined

    - name: Print result LDAP port is in use
      debug:
        msg: >-
          {% if check_ldap_after.rc != 0 %}
          Check failed: LDAP port 636 is not listening on {{ ansible_facts['fqdn'] }}
          {% else %}
          Check Pass: LDAP port 636 is listening on {{ ansible_facts['fqdn'] }}
          {% endif %}
      when: not already_joined and check_ldap_after is defined

    # SSH testing with delegation to controller/localhost - only for hosts that needed joining
    - name: Test SSH login (using execution nodes)
      delegate_to: "{{ hostvars['localhost']['ansible_controller_host'] | default('localhost') }}"
      shell: sshpass -p "{{ password }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 {{ username }}@{{ ansible_host }} echo "SSH login successful"
      register: ssh_test
      ignore_errors: yes
      no_log: true
      when: not already_joined

    - name: Print detailed SSH test results
      debug:
        msg: |
          SSH Test Results for {{ username }}@{{ ansible_facts['fqdn'] }}:
          Return Code: {{ ssh_test.rc }}
          Stdout: {{ ssh_test.stdout }}
          Stderr: {{ ssh_test.stderr }}
          Command: {{ ssh_test.cmd }}
      when: not already_joined and ssh_test is defined

    - name: Print SSH login test result
      debug:
        msg: >-
          {% if ssh_test.rc != 0 %}
          Check failed: Unable to login as AD user '{{ username }}' on {{ ansible_facts['fqdn'] }}
          {% else %}
          Check Pass: Login as AD user '{{ username }}' on {{ ansible_facts['fqdn'] }}
          {% endif %}
      when: not already_joined and ssh_test is defined
      
    # After domain join verification, collect post-join status
    - name: Update domain check results after domain join attempt
      set_fact:
        post_join_check: {
          "host": "{{ ansible_facts['fqdn'] }}", 
          "os_type": "SUSE {{ ansible_distribution_major_version }}", 
          "user_check": "{{ check_user_after.rc | default(1) }}", 
          "ldap_check": "{{ check_ldap_after.rc | default(1) }}",
          "ssh_check": "{{ ssh_test.rc | default(1) }}",
          "join_successful": "{{ check_user_after.rc == 0 and check_ldap_after.rc == 0 and ssh_test.rc == 0 }}"
        }
      when: not already_joined and check_user_after is defined and check_ldap_after is defined and ssh_test is defined

    # Add post-join result to collection
    - name: Add post-join check to domain_check_results
      set_fact:
        post_domain_check_results: "{{ post_domain_check_results | default([]) + [post_join_check] }}"
      delegate_to: localhost
      run_once: false
      when: not already_joined and post_join_check is defined
      
    - name: Print final result for individual host
      debug:
        msg: >-
          {% if already_joined %}
          Server {{ ansible_facts['fqdn'] }} was already joined to the domain at the start of this playbook run.
          {% elif check_user_after is defined and check_ldap_after is defined and ssh_test is defined and check_user_after.rc == 0 and check_ldap_after.rc == 0 and ssh_test.rc == 0 %}
          Successfully joined server {{ ansible_facts['fqdn'] }} to the domain
          {% else %}
          Failed to join server {{ ansible_facts['fqdn'] }} to the domain. Check manually or rerun playbook.
          {% endif %}
      when: not skip_remaining_tasks
      
    # Consolidate all post-join check results for a final report
    - name: Consolidate post-join domain check results
      set_fact:
        consolidated_post_checks: "{{ consolidated_post_checks | default([]) + hostvars[item].post_domain_check_results | default([]) }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost
      when: not skip_remaining_tasks
      ignore_errors: yes
      
    - name: Display final domain join status report
      debug:
        msg: |
          Final Domain Join Status Report:
          
          HOSTS ALREADY JOINED TO DOMAIN:
          {% for check in consolidated_domain_checks %}
          {% if check.already_joined %}
          - {{ check.host }} ({{ check.os_type }})
          {% endif %}
          {% endfor %}
          
          DOMAIN JOIN RESULTS FOR THIS RUN:
          {% for check in consolidated_post_checks | default([]) %}
          - Host: {{ check.host }} ({{ check.os_type }})
            User Check: {{ 'PASS' if check.user_check == 0 else 'FAIL' }}
            LDAP Check: {{ 'PASS' if check.ldap_check == 0 else 'FAIL' }}
            SSH Check: {{ 'PASS' if check.ssh_check == 0 else 'FAIL' }}
            Overall Status: {{ 'SUCCESSFUL' if check.join_successful else 'FAILED' }}
          {% endfor %}
          
          {% if consolidated_post_checks|default([])|length == 0 and not skip_remaining_tasks %}
          No hosts were processed for domain join in this run.
          {% endif %}
      run_once: true
      delegate_to: localhost
      when: not skip_remaining_tasks
