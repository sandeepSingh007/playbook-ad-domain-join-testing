---
- name: SUSE 11 Ad-Domain-join Playbook (Pre-Validation & Post-Validation)
  #hosts: "{{ host_list }}"
  hosts: all
  gather_facts: true
  vars:
    domain_name: wikilab.asia
    username: "{{ user }}"
    password: "{{ pass }}"
    ansible_python_interpreter: /usr/bin/env python
    domain_check_results: []
    
  ## Pre-Task Section of Playbook ##
  pre_tasks:
    ## Check if running on SUSE 11 first ##
    - name: Check if running on SUSE 11
      fail:
        msg: "This playbook only runs on SUSE 11 servers."
      when: ansible_distribution_major_version | int != 11
      tags: always
      
    - name: Gather OS version and distribution facts
      debug:
        var: ansible_distribution_version
      register: os_version

    - name: Extract OS major version from facts
      set_fact:
        ansible_distribution_major_version: "{{ ansible_distribution_version.split('.')[0] }}"

    - name: Print the OS major version
      debug:
        var: ansible_distribution_major_version
    
    ## Check if any hosts need domain joining - runs before main tasks ##
    - name: Check if user {{ username }} exists
      shell: getent passwd "{{ username }}"
      register: check_user
      changed_when: false
      ignore_errors: true
      
    - name: Check if LDAP port is in use
      shell: lsof -i:636
      register: check_ldap
      changed_when: false
      ignore_errors: true
      
    - name: Determine if server is already properly joined to domain
      set_fact:
        already_joined: "{{ check_user.rc == 0 and check_ldap.rc == 0 }}"
        
    - name: Display domain join status
      debug:
        msg: "{{ 'Server is already properly joined to the domain.' if already_joined else 'Server needs to be joined to the domain.' }}"
        
    ## Create a group for hosts that need domain joining ##
    - name: Add host to domain_join group if needed
      group_by:
        key: "domain_join_{{ not already_joined }}"
    
    ## Check if any hosts need domain joining - runs on controller only once ## 
    - name: Collect info about hosts needing domain join
      set_fact:
        host_needs_joining: "{{ not already_joined }}"
      
    - name: Aggregate domain join status across all hosts
      set_fact:
        all_hosts_joined: "{{ (all_hosts_joined | default(true)) and (hostvars[item].host_needs_joining | default(false) == false) }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost

    ## Create a summary list of all hosts and their status ##
    - name: Create host status summary
      set_fact:
        host_status_summary: "{{ host_status_summary | default([]) + [{'host': item, 'already_joined': hostvars[item].already_joined | default(false)}] }}"
      loop: "{{ ansible_play_hosts }}"
      run_once: true
      delegate_to: localhost
    
    - name: Display domain join status summary for all hosts
      debug:
        msg:
          - "Domain Join Status Summary:"
          - "{% for host_info in host_status_summary %} - {{ host_info.host }}: {{ 'Already joined to domain' if host_info.already_joined else 'Needs to be joined to domain' }}{% endfor %}"
          - ""
          - "{% if all_hosts_joined | default(false) %}All hosts are already joined to domain. Remaining tasks will be skipped.{% else %}Some hosts need to be joined to domain. Proceeding with domain join for those hosts.{% endif %}"
      run_once: true
      delegate_to: localhost 
      
    - name: Set skip_remaining_tasks flag
      set_fact:
        skip_remaining_tasks: "{{ all_hosts_joined | default(false) }}"
      delegate_to: localhost
      run_once: true
  
  ## Playbook Main Task Section ##
  tasks:
    ## Skip all tasks if all hosts are already joined ##
    - name: Skip all tasks if all hosts are joined
      meta: end_play
      when: skip_remaining_tasks | default(false)
      
    - name: Print success message if SUSE server joined domain
      debug:
        msg: "SUSE server joined domain"
      when: already_joined
      
    - name: Print failure message if SUSE server Not joined domain
      debug:
        msg: "{{ ansible_facts['fqdn'] }} server needs to be joined to domain"
      when: not already_joined
      
    - name: Exit the playbook if SUSE server already joined domain
      fail:
        msg: "This Server Already Joined Domain."
      when: already_joined
      tags: always
      
    ## Install packages and Join Domain - only if not already joined ##
    
    ## First create the necessary directories and prepare for installation ##
    - name: Create the openldap certs directory if it doesn't exist
      file:
        path: /etc/openldap/certs
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: not already_joined
          
    - name: Copy LDAP CERT
      copy:
        src: WIKILAB.ASIA-ROOT-CA.cer
        dest: /etc/openldap/certs/WIKILAB.ASIA-ROOT-CA.cer
        mode: '0644'
      when: not already_joined

    - name: Ensure temporary directory exists
      file:
        path: /tmp/suse-11-adpackages
        state: directory
        mode: '0755'
      when: not already_joined

    ## Install packages phase ##
    - name: Transfer suse-11-adpackages.tar from local /files directory
      copy:
        src: suse-11-adpackages.tar
        dest: /tmp/suse-11-adpackages.tar
        mode: '0644'
      when: not already_joined

    - name: Extract suse11_adpackages.tar
      unarchive:
        src: /tmp/suse-11-adpackages.tar
        dest: /tmp/suse-11-adpackages
        remote_src: true
      when: not already_joined

    # Install packages using zypper module 
    - name: Install RPM packages using zypper module
      command: "zypper --non-interactive install --no-gpg-checks {{ item }}"
      with_items:
        - /tmp/suse-11-adpackages/suse-11-adpackages/sssd-1.9.4-0.16.1.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/sssd-32bit-1.9.4-0.16.1.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/sssd-tools-1.9.4-0.16.1.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/samba-winbind-32bit-3.6.3-0.58.1.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/samba-winbind-3.6.3-0.58.1.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/pam-modules-11-1.25.26.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/openldap2-client-2.4.26-0.30.1.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/libiniparser0-32bit-2.17-87.17.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/libiniparser0-2.17-87.17.x86_64.rpm
        - /tmp/suse-11-adpackages/suse-11-adpackages/krb5-client-1.6.3-133.49.66.1.x86_64.rpm
      when: not already_joined
      register: package_install
      failed_when: "package_install.rc != 0"

    - name: Clean up temporary files
      file:
        path: "/tmp/suse-11-adpackages.tar"
        state: absent
      when: not already_joined and package_install is succeeded

    - name: Clean up temporary directory
      file:
        path: /tmp/suse-11-adpackages
        state: absent
      when: not already_joined and package_install is succeeded
    
    ## After packages are installed, take backups and modify configuration files ##
    - name: Take backup of existing ldap.conf
      copy:
        src: /etc/openldap/ldap.conf
        dest: /etc/openldap/ldap.conf.backup.{{ ansible_date_time.date }}_{{ ansible_date_time.time }}
        remote_src: yes
      when: not already_joined and package_install is succeeded
      ignore_errors: true
      
    - name: Modify ldap Configuration
      copy:
        src: suse-11-ldap.conf
        dest: /etc/openldap/ldap.conf
        mode: "0644"
        backup: yes
      when: not already_joined and package_install is succeeded

    - name: Take backup of existing smb.conf
      copy:
        src: /etc/samba/smb.conf
        dest: /etc/samba/smb.conf.backup.{{ ansible_date_time.date }}_{{ ansible_date_time.time }}
        remote_src: yes
      when: not already_joined and package_install is succeeded
      ignore_errors: true

    - name: Modify Samba Configuration
      copy:
        src: suse-11-smb.conf
        dest: /etc/samba/smb.conf
        mode: "0644"
        backup: yes
      when: not already_joined and package_install is succeeded

    - name: Take backup of existing sssd.conf if it exists
      copy:
        src: /etc/sssd/sssd.conf
        dest: /etc/sssd/sssd.conf.backup.{{ ansible_date_time.date }}_{{ ansible_date_time.time }}
        remote_src: yes
      when: not already_joined and package_install is succeeded
      ignore_errors: true

    ## Join domain phase ##
    - name: Join domain using net ads
      shell: net ads join -U {{ username }}@{{ domain_name }}%{{ password }} --verbose
      register: join_domain
      changed_when: False
      when: not already_joined and package_install is succeeded
      no_log: true
  
    - name: Print server join domain error message if any
      debug:
        var: join_domain.stderr_lines
      when: not already_joined and join_domain is defined and join_domain.rc != 0
      
    - name: Fail playbook if domain join failed
      fail:
        msg: "Failed to join domain. Please check the error messages above."
      when: not already_joined and join_domain is defined and join_domain.rc != 0
      
    - name: Wait for 10 seconds after domain join
      pause:
        seconds: 10
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      
    ## Configure post-domain join settings ##
    - name: Modify SSSD Configuration
      copy:
        src: suse-11-sssd.conf
        dest: /etc/sssd/sssd.conf
        mode: "0600"
        backup: yes
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Take backup of existing nsswitch.conf
      copy:
        src: /etc/nsswitch.conf
        dest: /etc/nsswitch.conf.backup.{{ ansible_date_time.date }}_{{ ansible_date_time.time }}
        remote_src: yes
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Update nsswitch.conf configuration file
      replace:
        path: /etc/nsswitch.conf
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
        backup: true
      with_items:
        - { regexp: '^passwd:.*', replace: 'passwd: compat sss' }
        - { regexp: '^group:.*', replace: 'group: compat sss' }
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Enable SSSD Authentication in PAM
      command: pam-config -a --sss
      register: pam_config_sss
      failed_when: pam_config_sss.rc != 0
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Enable SSSD Home Directory Management in PAM
      command: pam-config -a --mkhomedir
      register: pam_config_mkhomedir
      failed_when: pam_config_mkhomedir.rc != 0
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    ## Restart services phase ##
    - name: Restart Samba service
      service:
        name: smb
        state: restarted
        enabled: true
      register: smb_restart
      failed_when: smb_restart.failed
      vars:
        ansible_command_timeout: 20  # 20 seconds timeout for this service restart
        ansible_timeout: 20          # General timeout
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Restart Winbind service
      service:
        name: winbind
        state: restarted
        enabled: true
      register: winbind_restart
      failed_when: winbind_restart.failed
      vars:
        ansible_command_timeout: 20  # 20 seconds timeout for this service restart
        ansible_timeout: 20          # General timeout
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Restart SSSD service
      service:
        name: sssd
        state: restarted
        enabled: true
      register: sssd_restart
      failed_when: sssd_restart.failed
      vars:
        ansible_command_timeout: 20  # 20 seconds timeout for this service restart
        ansible_timeout: 20          # General timeout
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Stop nscd service
      service:
        name: nscd
        state: stopped
        enabled: false
      register: nscd_stop
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      
    - name: Wait for 10 seconds after restarting services
      pause:
        seconds: 10
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    ## Post validation of Join Domain - Only for hosts that needed domain joining ##
    - name: Verify domain join configuration
      block:
        - name: Verify AD user exists after domain join
          shell: getent passwd "{{ username }}"
          register: check_user_after
          changed_when: false
          ignore_errors: true
    
        - name: Print result ID for AD user
          debug:
            msg: "{% if check_user_after.rc != 0 %}Check failed: AD user '{{ username }}' does not exist on {{ ansible_facts['fqdn'] }}{% else %}Check Pass: AD user '{{ username }}' exists on {{ ansible_facts['fqdn'] }}{% endif %}"
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    ## SSH testing - only for hosts that needed domain joining ##
    - name: Test SSH login before blacklisting (using execution nodes)
      delegate_to: "{{ hostvars['localhost']['ansible_controller_host'] | default('localhost') }}"
      shell: sshpass -p "{{ password }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 {{ username }}@{{ ansible_host }} echo "SSH login successful"
      register: ssh_test_before
      ignore_errors: true
      no_log: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Verify LDAP port is in use
      shell: lsof -i:636
      register: check_ldap_after
      changed_when: false
      ignore_errors: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0
        
    - name: Print result LDAP port is in use
      debug:
        msg: "{% if check_ldap_after.rc != 0 %}Check failed: LDAP port 636 is not listening on {{ ansible_facts['fqdn'] }}{% else %}Check Pass: LDAP port 636 is listening on {{ ansible_facts['fqdn'] }}{% endif %}"
      when: not already_joined and join_domain is defined and join_domain.rc == 0
    
    ## [Before] - SSH Login Troubleshooting Section (Optional) ##
    - name: Print full SSH test output
      debug:
        var: ssh_test_before
        verbosity: 0
      no_log: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      
    - name: Print Summary of SSH test results
      debug:
        msg: |
          SSH Test Results for {{ username }}@{{ ansible_facts['fqdn'] }}:
          Return Code: {{ ssh_test_before.rc }}
          Stdout: {{ ssh_test_before.stdout }}
          Stderr: {{ ssh_test_before.stderr }}
          Command: {{ ssh_test_before.cmd }}
      no_log: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0
          
    - name: Print SSH test result before blacklisting
      debug:
        msg: "{% if ssh_test_before.rc != 0 %}Check failed: Unable to login as AD user '{{ username }}' on {{ ansible_facts['fqdn'] }}{% else %}Check Pass: Login as AD user '{{ username }}' on {{ ansible_facts['fqdn'] }} was successful{% endif %}"
      when: not already_joined and join_domain is defined and join_domain.rc == 0
    ## End SSH Login Troubleshooting Section ##
    
    ## Blacklisting section - Using SSSD configuration for SUSE 11 ##
    - name: Ensure access_provider is set to simple in sssd.conf
      lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^#access_provider ='
        line: 'access_provider = simple'
        create: false
        #backup: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Add simple_allow_users setting to SSSD config
      lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^simple_allow_users ='
        line: 'simple_allow_users = $'
        create: false
        insertafter: 'access_provider = simple'
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Add simple_allow_groups setting to SSSD config
      lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: '^simple_allow_groups ='
        line: 'simple_allow_groups = $'
        create: false
        insertafter: 'simple_allow_users = \$'
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      
    - name: Restart SSSD after blacklisting
      service:
        name: sssd
        state: restarted
      register: sssd_restart_blacklist
      failed_when: sssd_restart_blacklist.failed
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      
    - name: Wait for 10 seconds after restarting SSSD
      pause:
        seconds: 10
      when: not already_joined and join_domain is defined and join_domain.rc == 0
    ## End Blacklisting Section ##
    
    ## Test blacklisting with SSH test ##
    - name: Test SSH login after blacklisting (using execution nodes)
      delegate_to: "{{ hostvars['localhost']['ansible_controller_host'] | default('localhost') }}"
      shell: sshpass -p "{{ password }}" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 {{ username }}@{{ ansible_host }} echo "SSH login successful"
      register: ssh_test_after
      ignore_errors: true
      no_log: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      
    ## [After] - SSH Login Troubleshooting Section (Optional) ##
    - name: Print full SSH test output
      debug:
        var: ssh_test_after
        verbosity: 0
      when: not already_joined and join_domain is defined and join_domain.rc == 0
      no_log: true
        
    - name: Print detailed SSH test results
      debug:
        msg: |
          SSH Test Results for {{ username }}@{{ ansible_facts['fqdn'] }}:
          Return Code: {{ ssh_test_after.rc }}
          Stdout: {{ ssh_test_after.stdout }}
          Stderr: {{ ssh_test_after.stderr }}
          Command: {{ ssh_test_after.cmd }}
      no_log: true    
      when: not already_joined and join_domain is defined and join_domain.rc == 0

    - name: Print result of SSH login test after blacklisting
      debug:
        msg: "{{ 'All Users are blacklisted successfully - SSH access denied as expected' if ssh_test_after.rc != 0 else 'WARNING: User still has SSH access after blacklisting' }}"
      when: not already_joined and join_domain is defined and join_domain.rc == 0
    ## End Blacklisting Section & SSH Login Troubleshooting Section ##

    ## LDAP Port Verification ##
    - name: Verify LDAP port is in use
      shell: lsof -i:636
      register: check_ldap_after
      until: check_ldap_after.rc == 0
      retries: 10
      delay: 5  # 5 seconds between retries
      changed_when: false
      ignore_errors: true
      when: not already_joined and join_domain is defined and join_domain.rc == 0
          
    ## Final status report - only for hosts that joined domain ##
    - name: Print final result of all checks
      debug:
        msg: "{% if check_user_after.rc == 0 and check_ldap_after.rc == 0 %}Successfully joined server {{ ansible_facts['fqdn'] }} to the domain{% else %}Failed to join server {{ ansible_facts['fqdn'] }} to the domain. Check manually or rerun playbook.{% endif %}"
      when: not already_joined and join_domain is defined and join_domain.rc == 0
...
